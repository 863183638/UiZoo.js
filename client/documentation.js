const libraryDocs = {"AutoLocationTooltip":"/**\n * @name\n * AutoLocationTooltip\n * \n * @description\n * An auto-location version of the Tooltip. Responsive solution to the tooltip.\n * See Tooltip for more information - it uses the same props\n *\n * @example\n * <AutoLocationTooltip tooltip={'tooltip inner text!'} side=\"top\" alignment=\"start\" trigger=\"hover\">\n *     <span>Text to open the tooltip upon</span>\n * </AutoLocationTooltip>\n *\n * @param {*} [tooltip] tooltip inner content, can be text or elements\n * @param {\"top\"|\"bottom\"} [side=\"top\"] preferred placement of the tooltip relative to the element\n * @param {\"center\"|\"start\"|\"end\"} [alignment=\"center\"] preferred alignment of the tooltip relative to the element\n * @param {\"click\"|\"hover\"} [trigger=\"click\"] trigger event, on mobile you should stick with click\n * @param {function} [onTooltipOpen] callback for when the tooltip is opened\n * @param {function} [onAfterTooltipOpen] callback for after the tooltip is opened\n * @param {node} [children] the element/s to be triggering the tooltip appearance\n */","Card":"/**\n * @name \n * Card\n * \n * @module\n * Cards\n * \n * @description\n * Card container with border and box-shadow\n *\n * @example\n * // card with children\n * <Card>\n *  1123\n * </Card>\n *\n * @param {String} [className] Append class name to container\n * @param {React.Children} [children] Children elements\n *\n */","CodeCard":"/**\n * @name\n * CodeCard\n * \n * @module\n * Cards\n * \n * @description\n * CodeCard with border and inset box-shadow\n * to show code examples with \"pre\" tag\n *\n * @example\n * <CodeCard>console.log('You are awesome!');</CodeCard>\n *\n * @param {string} [className]\n * @param {node} children\n *\n */","Collapsible":"/**\n * @name\n * Collapsible\n *\n * @description\n * An element that can be closed or opened by clicking on the title\n *\n * @example\n * // Example with some style minimalism\n * <Collapsible\n *      title=\"Click me to open/close the content\"\n *      style={{border: \"1px solid\", padding: \"15px\"}}\n *      contentStyle={{paddingTop: \"15px\"}}>\n *      This is the content\n * </Collapsible>\n *\n * @param {node} title clickable string/element to open/close the content\n * @param {node} children inner content of the Collapsible\n * @param {boolean} [isOpen=true] to control the Collapsible from the outside by passing a boolean value\n * @param {function} [onChange] callback for change of the content state\n * @param {object} [style] outer style of the element\n * @param {object} [titleStyle] the style of the title only\n * @param {object} [contentStyle] the title of the content only\n */","Menu":"/**\n * @name\n * Menu \n * @description\n * Menu to select items\n * \n * @example\n * // Choose a color\n * <Menu value=\"pink\" onChange={(e, val) => console.log(val)}>\n *    <MenuItem value=\"pink\"\n *          style={{backgroundColor:\"#ecabab\"}}>\n *          Color pink\n *    </MenuItem>\n *    <MenuItem value=\"cyan\"\n *          style={{backgroundColor:\"#66cfdc\"}}>\n *          Color cyan\n *    </MenuItem>\n *    <MenuItem value=\"green\"\n *          style={{backgroundColor:\"#abca87\"}}>\n *          Color green\n *    </MenuItem>\n * </Menu>\n * \n * @param {any} value\n * @param {function} [onChange]\n * @param {node} children\n */","MenuItem":"/**\n * @name \n * MenuItem\n * \n * @description\n * Menu Item\n * \n * @example \n * <MenuItem>\n *   Menu Item\n * </MenuItem>\n *\n * @param {node} children\n */","RaisedButton":"/**\n * @name \n * RaisedButton\n * \n * @description\n * A styled button for clicking\n * \n * @example\n * <RaisedButton onClick={(e) => console.log('RaisedButton was clicked, event: ', e)}>\n *    Raised Button\n * </RaisedButton>\n * \n * @param {any} children\n * @param {function} [onClick]\n */","Separator":"/**\n * @name\n * Separator\n * \n * @description\n * A generic separator to be used between components\n *\n * @example\n * <Separator/>\n */","TextField":"/**\n * @name\n * TextField\n * \n * @module\n * Inputs\n * \n * @description\n * Text Field\n * \n * @example\n * // Without value\n * <TextField\n *      placeholder=\"Placeholder Text\"\n *      onChange={(e) => console.log('TextField was changed with value: ', e.target.value)}/>\n * \n * @example\n * // With controlled value, change only from the parent\n * <TextField\n *      value=\"Can't change this\"\n *      onChange={(e) => console.log('TextField was changed with value: ', e.target.value)}/>\n * \n * @param {string} [placeholder] value as a placeholder until user input another value\n * @param {string} [value] current value of the text field\n * @param {function} onChange\n */"};
            export default libraryDocs;